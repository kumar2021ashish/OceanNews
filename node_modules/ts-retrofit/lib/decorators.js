"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Ensure the `__meta__` attribute is in the target object and `methodName` has been initialized.
 * @param target
 * @param methodName
 */
const ensureMeta = (target, methodName) => {
    if (!target.__meta__) {
        target.__meta__ = {};
    }
    if (!target.__meta__[methodName]) {
        target.__meta__[methodName] = {};
    }
};
/**
 * Register HTTP method and path in API method.
 * @param method
 * @param url
 * @param options
 */
const registerMethod = (method, url, options) => {
    return (target, methodName, descriptor) => {
        ensureMeta(target, methodName);
        target.__meta__[methodName].method = method;
        target.__meta__[methodName].path = url;
        target.__meta__[methodName].options = options;
    };
};
/**
 * GET decorator.
 * @param url
 * @param options
 * @sample @GET("/users")
 * @constructor
 */
exports.GET = (url, options) => {
    return registerMethod("GET", url, options);
};
/**
 * POST decorator.
 * @param url
 * @param options
 * @sample @POST("/users")
 * @constructor
 */
exports.POST = (url, options) => {
    return registerMethod("POST", url, options);
};
/**
 * PUT decorator.
 * @param url
 * @param options
 * @sample @PUT("/users/{userId}")
 * @constructor
 */
exports.PUT = (url, options) => {
    return registerMethod("PUT", url, options);
};
/**
 * PATCH decorator.
 * @param url
 * @param options
 * @sample @PATCH("/users/{userId}")
 * @constructor
 */
exports.PATCH = (url, options) => {
    return registerMethod("PATCH", url, options);
};
/**
 * DELETE decorator.
 * @param url
 * @param options
 * @sample @DELETE("/users/{userId}")
 * @constructor
 */
exports.DELETE = (url, options) => {
    return registerMethod("DELETE", url, options);
};
/**
 * HEAD decorator.
 * @param url
 * @param options
 * @sample @HEAD("/users/{userId}")
 * @constructor
 */
exports.HEAD = (url, options) => {
    return registerMethod("HEAD", url, options);
};
/**
 * OPTIONS decorator.
 * @param url
 * @param options
 * @sample @OPTIONS("/users/{userId}")
 * @constructor
 */
exports.OPTIONS = (url, options) => {
    return registerMethod("OPTIONS", url, options);
};
/**
 * Set base path for API service.
 * @param path
 * @sample @BasePath("/api/v1")
 * @constructor
 */
exports.BasePath = (path) => {
    return (target) => {
        ensureMeta(target.prototype, "basePath");
        target.prototype.__meta__.basePath = path;
    };
};
/**
 * Set path parameter for API endpoint.
 * @param paramName
 * @sample @Path("userId") userId: number
 * @constructor
 */
exports.Path = (paramName) => {
    return (target, methodName, paramIndex) => {
        ensureMeta(target, methodName);
        if (!target.__meta__[methodName].pathParams) {
            target.__meta__[methodName].pathParams = {};
        }
        target.__meta__[methodName].pathParams[paramIndex] = paramName;
    };
};
/**
 * Set body for API endpoint.
 * @param target
 * @param methodName
 * @param paramIndex
 * @sample @Body user: User
 * @constructor
 */
exports.Body = (target, methodName, paramIndex) => {
    ensureMeta(target, methodName);
    target.__meta__[methodName].bodyIndex = paramIndex;
};
/**
 * Set static HTTP headers for API endpoint.
 * @param headers
 * @sample @Headers({
 *           "Content-Type": "application/x-www-form-urlencoded;charset=utf-8",
 *           "Accept": "application/json"
 *         })
 * @constructor
 */
exports.Headers = (headers) => {
    return (target, methodName, descriptor) => {
        ensureMeta(target, methodName);
        if (!target.__meta__[methodName].headers) {
            target.__meta__[methodName].headers = {};
        }
        target.__meta__[methodName].headers = headers;
    };
};
/**
 * Set HTTP header as variable in API method.
 * @param paramName
 * @sample @Header("X-Token") token: string
 * @constructor
 */
exports.Header = (paramName) => {
    return (target, methodName, paramIndex) => {
        ensureMeta(target, methodName);
        if (!target.__meta__[methodName].headerParams) {
            target.__meta__[methodName].headerParams = {};
        }
        target.__meta__[methodName].headerParams[paramIndex] = paramName;
    };
};
/**
 * Set header map for API endpoint.
 * @param target
 * @param methodName
 * @param paramIndex
 * @sample @HeaderMap headers: any
 * @constructor
 */
exports.HeaderMap = (target, methodName, paramIndex) => {
    ensureMeta(target, methodName);
    target.__meta__[methodName].headerMapIndex = paramIndex;
};
/**
 * Set static query for API endpoint.
 * @param query
 * @sample @Queries({
 *           page: 1,
 *           size: 20,
 *           sort: "createdAt:desc",
 *         })
 * @constructor
 */
exports.Queries = (query) => {
    return (target, methodName, descriptor) => {
        ensureMeta(target, methodName);
        if (!target.__meta__[methodName].query) {
            target.__meta__[methodName].query = {};
        }
        target.__meta__[methodName].query = query;
    };
};
/**
 * Set query as variable in API method.
 * @param paramName
 * @sample @Query('group') group: string
 * @constructor
 */
exports.Query = (paramName) => {
    return (target, methodName, paramIndex) => {
        ensureMeta(target, methodName);
        if (!target.__meta__[methodName].queryParams) {
            target.__meta__[methodName].queryParams = {};
        }
        target.__meta__[methodName].queryParams[paramIndex] = paramName;
    };
};
/**
 * Set query map for API endpoint.
 * @param target
 * @param methodName
 * @param paramIndex
 * @sample @QueryMap query: SearchQuery
 * @constructor
 */
exports.QueryMap = (target, methodName, paramIndex) => {
    ensureMeta(target, methodName);
    target.__meta__[methodName].queryMapIndex = paramIndex;
};
/**
 * 'content-type': 'application/x-www-form-urlencoded;charset=utf-8' will be added.
 * @param target
 * @param methodName
 * @param descriptor
 * @sample @FormUrlEncoded
 * @constructor
 */
exports.FormUrlEncoded = (target, methodName, descriptor) => {
    exports.Headers({ "content-type": "application/x-www-form-urlencoded;charset=utf-8" })(target, methodName, descriptor);
};
/**
 * Set field of form for API endpoint. Only effective when method has been decorated by @FormUrlEncoded.
 * @param paramName
 * @sample @Field("title") title: string
 * @constructor
 */
exports.Field = (paramName) => {
    return (target, methodName, paramIndex) => {
        ensureMeta(target, methodName);
        if (!target.__meta__[methodName].fields) {
            target.__meta__[methodName].fields = {};
        }
        target.__meta__[methodName].fields[paramIndex] = paramName;
    };
};
/**
 * Set field map for API endpoint.
 * @param target
 * @param methodName
 * @param paramIndex
 * @sample @FieldMap post: Post
 * @constructor
 */
exports.FieldMap = (target, methodName, paramIndex) => {
    ensureMeta(target, methodName);
    target.__meta__[methodName].fieldMapIndex = paramIndex;
};
/**
 * 'content-type': 'multipart/form-data' will be added to HTTP headers.
 * @param target
 * @param methodName
 * @param descriptor
 * @sample @Multipart
 * @constructor
 */
exports.Multipart = (target, methodName, descriptor) => {
    exports.Headers({ "content-type": "multipart/form-data" })(target, methodName, descriptor);
};
/**
 * Set part of form data for API endpoint. Only effective when method has been decorated by @Multipart.
 * @param paramName
 * @sample @Part("bucket") bucket: PartDescriptor<string>
 * @constructor
 */
exports.Part = (paramName) => {
    return (target, methodName, paramIndex) => {
        ensureMeta(target, methodName);
        if (!target.__meta__[methodName].parts) {
            target.__meta__[methodName].parts = {};
        }
        target.__meta__[methodName].parts[paramIndex] = paramName;
    };
};
/**
 * Set the response type for method.
 * @param responseType
 * @sample @ResponseType("stream")
 * @constructor
 */
exports.ResponseType = (responseType) => {
    return (target, methodName) => {
        ensureMeta(target, methodName);
        target.__meta__[methodName].responseType = responseType;
    };
};
/**
 * Set request transformer for method.
 * @param transformer
 * @sample @RequestTransformer((data: any, headers?: any) => {
 *           data.foo = 'foo';
 *           return JSON.stringify(data);
 *         })
 * @constructor
 */
exports.RequestTransformer = (transformer) => {
    return (target, methodName) => {
        ensureMeta(target, methodName);
        target.__meta__[methodName].requestTransformer = transformer;
    };
};
/**
 * Set response transformer for method.
 * @param transformer
 * @sample @ResponseTransformer((data: any, headers?: any) => {
 *           const json = JSON.parse(data);
 *           json.foo = 'foo';
 *           return json;
 *         })
 * @constructor
 */
exports.ResponseTransformer = (transformer) => {
    return (target, methodName) => {
        ensureMeta(target, methodName);
        target.__meta__[methodName].responseTransformer = transformer;
    };
};
/**
 * Set timeout for method, this config will shield service timeout.
 * @param timeout
 * @sample @Timeout(5000)
 * @constructor
 */
exports.Timeout = (timeout) => {
    return (target, methodName) => {
        ensureMeta(target, methodName);
        target.__meta__[methodName].timeout = timeout;
    };
};
/**
 * Declare response status code for method, do nothing just a declaration.
 * @param responseStatus
 * @sample ResponseStatus(204)
 * @constructor
 */
exports.ResponseStatus = (responseStatus) => {
    return (target, methodName) => {
        ensureMeta(target, methodName);
        target.__meta__[methodName].responseStatus = responseStatus;
    };
};
/**
 * A direct way to set config for a request in axios.
 * @param config
 * @sample @Config({ maxRedirects: 1 })
 * @constructor
 */
exports.Config = (config) => {
    return (target, methodName) => {
        ensureMeta(target, methodName);
        target.__meta__[methodName].config = config;
    };
};
/**
 * A easy way to send GraphQL query.
 * @param query
 * @param operationName
 * @sample @GraphQL(gqlQuery)
 * @constructor
 */
exports.GraphQL = (query, operationName) => {
    return (target, methodName) => {
        ensureMeta(target, methodName);
        target.__meta__[methodName].gqlQuery = query;
        target.__meta__[methodName].gqlOperationName = operationName;
    };
};
/**
 * Adds variables to GraphQL query
 * @param target
 * @param methodName
 * @param paramIndex
 * @sample @GraphQLVariables variables: any
 * @constructor
 */
exports.GraphQLVariables = (target, methodName, paramIndex) => {
    ensureMeta(target, methodName);
    target.__meta__[methodName].gqlVariablesIndex = paramIndex;
};
